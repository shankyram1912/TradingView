//@version=5
indicator(title="Enhanced ProfitAlgo Indicator", shorttitle="EPA Indic.", overlay=true, format=format.price, precision=2)

// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// Indicator Overview: Enhanced ProfitAlgo Indicator
// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
// This indicator is designed to provide a comprehensive market analysis by combining several key technical concepts
// to identify potential trends, momentum, and trading opportunities. It is not a standalone trading system but rather
// a decision-support tool.
//
// Key Building Blocks & Concepts:
// 1. Price Smoothing: To reduce noise and highlight the underlying trend or direction of price.
//    - Why: Raw price data can be volatile; smoothing helps in clearer trend identification.
//    - What: Applies a user-selectable moving average (EMA, DEMA, TEMA, WMA, SMA) to the closing price.
//    - How to Interpret: Observe the slope and direction of the smoothed line. A rising line suggests bullish sentiment,
//      a falling line suggests bearish sentiment. Crossovers with price or other MAs can also be significant.
//
// 2. Volume-Weighted Moving Average (VWMA) & Bands: To identify dynamic support/resistance and trend, factoring in volume.
//    - Why: VWMA gives more weight to price action that occurs with higher volume, potentially making it more significant.
//      Bands help visualize volatility and potential overextensions.
//    - What: Calculates a VWMA and plots ATR-based bands around it. The fill color changes based on VWMA slope.
//    - How to Interpret: The VWMA line acts as a dynamic support/resistance. Price above VWMA can be bullish, below bearish.
//      The bands can indicate volatility; touches or breaches of bands might signal overextension or potential reversals.
//      The color of the fill indicates the VWMA's immediate trend.
//
// 3. Price Volume Trend (PVT): To measure money flow by combining price change and volume.
//    - Why: Confirms price trends with volume. Divergences between PVT and price can signal weakening momentum.
//    - What: Accumulates volume based on the percentage change in price. A smoothed PVT line is plotted.
//    - How to Interpret: A rising PVT suggests buying pressure supporting an uptrend. A falling PVT suggests selling
//      pressure supporting a downtrend. Look for PVT to move in the same direction as price for confirmation.
//
// 4. Relative Strength Index (RSI): To identify overbought/oversold conditions and momentum.
//    - Why: Helps gauge if an asset is potentially overvalued (overbought) or undervalued (oversold), and can show momentum.
//    - What: Calculates the speed and change of price movements. Values range from 0 to 100.
//    - How to Interpret: Traditionally, RSI above 70 is overbought, below 30 is oversold. These levels can signal potential
//      reversals or pauses. Divergences between RSI and price can also be powerful signals.
//
// 5. Average Directional Index (ADX): To measure trend strength (not direction).
//    - Why: Helps determine if the market is trending or ranging, allowing traders to adapt their strategy.
//    - What: Calculates trend strength based on Directional Movement Index (DMI) components (+DI and -DI).
//    - How to Interpret: ADX values above a threshold (e.g., 20-25) suggest a trending market. Rising ADX indicates
//      strengthening trend (either up or down). Low or falling ADX suggests a ranging or weakening trend.
//
// 6. Multi-Timeframe (MTF) Confirmation: To align trades with the broader market trend.
//    - Why: Trading in the direction of the longer-term trend can increase probability of success.
//    - What: Fetches closing prices from a higher user-defined timeframe and calculates an EMA on it.
//    - How to Interpret: If MTF confirmation is enabled, signals generated by the indicator are filtered based on whether
//      the current price on the higher timeframe is above (uptrend) or below (downtrend) its EMA.
//
// 7. Pivot Points: To identify potential daily support and resistance levels.
//    - Why: These are widely watched levels where price may react or reverse.
//    - What: Calculates standard daily pivot points (PP, S1, R1, S2, R2) based on the previous day's high, low, and close.
//    - How to Interpret: Price approaching these levels may find support (at S1, S2) or resistance (at R1, R2).
//      Breakouts or rejections from these levels can be significant.
//
// 8. On-Screen Table: Provides a quick summary of the current state of key components.
//    - Why: Offers an at-a-glance overview without needing to interpret all individual plots.
//    - What: Displays the current overall trend status, ADX strength, MTF status, and RSI status.
//    - How to Interpret: Use as a quick dashboard to confirm your analysis from the chart plots.
// ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————


// ————— INPUTS —————
// These inputs allow users to customize the indicator's parameters and appearance.

// Smoothing Settings: Controls the main price smoothing mechanism.
grp_smooth = "Smoothing Settings"
smooth_len1 = input.int(10, "Smoother Length 1", group=grp_smooth, minval=1, tooltip="Primary length for the price smoothing algorithm. Shorter lengths are more responsive, longer lengths are smoother.")
smooth_type = input.string("EMA", "Smoother Type", options=["EMA", "DEMA", "TEMA", "WMA", "SMA"], group=grp_smooth, tooltip="Type of moving average used for price smoothing. EMA/DEMA/TEMA give more weight to recent prices.")

// VWMA Bands Settings: Configures the Volume-Weighted Moving Average and its volatility bands.
grp_vwma = "VWMA Bands Settings"
vwma_len = input.int(20, "VWMA Length", group=grp_vwma, minval=1, tooltip="Length for the Volume Weighted Moving Average. Considers both price and volume.")
vwma_band_mult = input.float(1.5, "VWMA Band Multiplier (ATR)", group=grp_vwma, minval=0.1, step=0.1, tooltip="ATR multiplier for VWMA band width. Higher values create wider bands.")

// Price Volume Trend (PVT) Settings: Adjusts the smoothing of the PVT indicator.
grp_pvt = "PVT Settings"
pvt_smooth_len = input.int(10, "PVT Smoothing Length", group=grp_pvt, minval=1, tooltip="Smoothing length for the Price Volume Trend indicator. Helps to reduce noise in PVT.")

// ATR Settings: Configures the Average True Range, used for volatility calculations (e.g., VWMA bands, SL/TP references).
grp_atr = "ATR Settings"
atr_len = input.int(14, "ATR Length", group=grp_atr, minval=1, tooltip="Length for the Average True Range calculation, a measure of market volatility.")
sl_atr_mult_ref = input.float(2.0, "Ref SL ATR Multiplier", group=grp_atr, minval=0.1, step=0.1, tooltip="Reference ATR multiplier for plotting potential Stop Loss levels from signal arrows.")
tp1_rr_ref = input.float(1.5, "Ref TP1 R:R", group=grp_atr, minval=0.1, step=0.1, tooltip="Reference Risk:Reward ratio for plotting potential Take Profit 1 levels from signal arrows.")
tp2_rr_ref = input.float(3.0, "Ref TP2 R:R (Optional)", group=grp_atr, minval=0.1, step=0.1, tooltip="Reference Risk:Reward ratio for potential Take Profit 2. Set to 0 to disable this plot.")


// RSI Settings: Configures the Relative Strength Index for overbought/oversold levels.
grp_rsi = "RSI Settings"
rsi_len = input.int(14, "RSI Length", group=grp_rsi, minval=1, tooltip="Length for the Relative Strength Index. Standard is 14.")
rsi_ob_level = input.int(70, "RSI Overbought Level", group=grp_rsi, minval=51, maxval=100, tooltip="RSI level considered overbought (e.g., 70 or 80).")
rsi_os_level = input.int(30, "RSI Oversold Level", group=grp_rsi, minval=0, maxval=49, tooltip="RSI level considered oversold (e.g., 30 or 20).")

// ADX (Regime Filter) Settings: Configures the Average Directional Index for trend strength.
grp_adx = "ADX Regime Filter Settings"
adx_len = input.int(14, "ADX Length", group=grp_adx, minval=1, tooltip="Length for the ADX calculation (DI Length). Standard is 14.")
adx_smooth_len = input.int(14, "ADX Smoothing Length", group=grp_adx, minval=1, tooltip="Smoothing length for the ADX line itself. Standard is 14.")
adx_trend_threshold = input.int(20, "ADX Trend Minimum", group=grp_adx, minval=1, tooltip="ADX value above which a market is considered trending (e.g., 20 or 25).")

// Multi-Timeframe (MTF) Trend Confirmation Settings: For aligning with a higher timeframe trend.
grp_mtf = "MTF Trend Confirmation"
mtf_enable = input.bool(true, "Enable MTF Trend Confirmation", group=grp_mtf, tooltip="If true, signals will consider the trend on a higher timeframe.")
mtf_timeframe = input.timeframe("240", "MTF Timeframe", group=grp_mtf, tooltip="Higher timeframe for trend confirmation (e.g., 60, 240, D). Should be higher than chart timeframe.")
mtf_ema_len = input.int(50, "MTF EMA Length", group=grp_mtf, minval=1, tooltip="EMA length for MTF trend determination.")

// Pivot Points Settings: Controls visibility of daily pivot levels.
grp_pivot = "Pivot Point Settings"
show_pivots = input.bool(true, "Show Pivot Points", group=grp_pivot, tooltip="Toggle visibility of daily pivot point levels.")

// Signal Visualization Settings: Controls how buy/sell signals and potential SL/TP levels are displayed.
grp_signal_viz = "Signal Visualization Settings"
show_buy_sell_arrows = input.bool(true, "Show Buy/Sell Arrows", group=grp_signal_viz, tooltip="Toggles the display of BUY/SELL arrows on the chart.")
show_potential_sl_tp = input.bool(true, "Show Potential SL/TP on Signal", group=grp_signal_viz, tooltip="Plots suggested SL/TP levels when a signal arrow appears, for reference only.")

// Table UI Settings: Customizes the appearance of the on-screen information table.
grp_table_ui = "Table UI Settings"
table_text_size_input = input.string(size.small, "Table Text Size", options=[size.tiny, size.small, size.normal, size.large, size.huge], group=grp_table_ui, tooltip="Adjust text size for the Market Monitor table.")

// Plotting Customization: Provides options to toggle and style main indicator plots for better clarity.
grp_plotting_viz = "Plotting Customization"
show_smoothed_price = input.bool(true, "Show Smoothed Price", group=grp_plotting_viz, tooltip="Toggles the display of the main smoothed price line.")
smoothed_price_width = input.int(2, "Smoothed Price Width", group=grp_plotting_viz, minval=1, maxval=5, tooltip="Adjusts the thickness of the smoothed price line.")
show_vwma_line = input.bool(true, "Show VWMA Line", group=grp_plotting_viz, tooltip="Toggles the display of the VWMA line.")
vwma_line_width = input.int(1, "VWMA Line Width", group=grp_plotting_viz, minval=1, maxval=5, tooltip="Adjusts the thickness of the VWMA line.")
show_vwma_bands_plots = input.bool(true, "Show VWMA Bands", group=grp_plotting_viz, tooltip="Toggles VWMA upper/lower band lines and the fill area.")
vwma_fill_transp_input = input.int(85, "VWMA Bands Fill Transparency (0-100)", group=grp_plotting_viz, minval=0, maxval=100, tooltip="0=Opaque, 100=Invisible. Adjusts transparency of the VWMA band fill.")


// ————— FUNCTIONS —————
// Generic Moving Average (MA) function: Calculates different types of MAs based on user input.
// This promotes code reusability and makes it easy to switch MA types.
f_ma(source, length, type) =>
    float result = na // Initialize result to 'not a number'
    // Conditional calculation based on the selected MA type
    if type == "EMA"
        result := ta.ema(source, length) // Exponential Moving Average
    else if type == "DEMA"
        float ema1 = ta.ema(source, length)
        result := 2 * ema1 - ta.ema(ema1, length) // Double Exponential Moving Average
    else if type == "TEMA"
        float ema1 = ta.ema(source, length)
        float ema2 = ta.ema(ema1, length)
        result := 3 * (ema1 - ema2) + ta.ema(ema2, length) // Triple Exponential Moving Average
    else if type == "WMA"
        result := ta.wma(source, length) // Weighted Moving Average
    else if type == "SMA"
        result := ta.sma(source, length) // Simple Moving Average
    result // Return the calculated MA value

// ————— CALCULATIONS —————
// This section contains the core calculations for all indicator components.

// Smoothed Price: Applies the selected smoothing MA to the close price.
// Helps to identify the underlying trend by reducing short-term price fluctuations.
smoothed_price = f_ma(close, smooth_len1, smooth_type)

// Average True Range (ATR): Measures market volatility.
// Used here for calculating the width of VWMA bands and reference SL/TP levels.
atr_val = ta.atr(atr_len)

// Volume-Weighted Moving Average (VWMA) & Bands:
// VWMA gives more importance to bars with higher volume. Bands provide a dynamic range around the VWMA.
vwma_val = ta.vwma(close, vwma_len) // Calculate VWMA
vwma_upper_band = vwma_val + atr_val * vwma_band_mult // Upper band based on ATR
vwma_lower_band = vwma_val - atr_val * vwma_band_mult // Lower band based on ATR

// Price Volume Trend (PVT): A momentum indicator that relates volume to price changes.
// Smoothed with an EMA to make it less erratic.
pvt_raw = ta.pvt // Calculate raw PVT
pvt_val = ta.ema(pvt_raw, pvt_smooth_len) // Smooth the PVT

// Relative Strength Index (RSI): Measures the speed and change of price movements to identify overbought/oversold conditions.
rsi_val = ta.rsi(close, rsi_len)

// Average Directional Index (ADX): Measures the strength of a trend, irrespective of its direction.
// Composed of +DI (Positive Directional Indicator) and -DI (Negative Directional Indicator).
[di_plus, di_minus, adx_line_raw] = ta.dmi(adx_len, adx_smooth_len) // DMI calculation returns +DI, -DI, and smoothed ADX
adx_val = adx_line_raw // Use the smoothed ADX value

// Multi-Timeframe (MTF) Trend Confirmation: Determines trend on a higher timeframe.
// `request.security` fetches data from the specified symbol and timeframe. `lookahead=barmerge.lookahead_off` prevents repainting.
mtf_close_raw = request.security(syminfo.tickerid, mtf_timeframe, close, lookahead = barmerge.lookahead_off)
mtf_ema = ta.ema(mtf_close_raw, mtf_ema_len) // Calculate EMA on the MTF close
mtf_is_uptrend = mtf_close_raw > mtf_ema // True if MTF close is above its EMA
mtf_is_downtrend = mtf_close_raw < mtf_ema // True if MTF close is below its EMA

// Pivot Points (Traditional Daily Pivots): Calculated based on the previous day's High, Low, and Close.
// These are static levels for the current day, acting as potential support/resistance.
pivot_high_prev_day = request.security(syminfo.tickerid, "D", high[1], lookahead=barmerge.lookahead_off) // Previous day's high
pivot_low_prev_day = request.security(syminfo.tickerid, "D", low[1], lookahead=barmerge.lookahead_off)   // Previous day's low
pivot_close_prev_day = request.security(syminfo.tickerid, "D", close[1], lookahead=barmerge.lookahead_off) // Previous day's close

pp = (pivot_high_prev_day + pivot_low_prev_day + pivot_close_prev_day) / 3 // Pivot Point (Central)
r1 = 2 * pp - pivot_low_prev_day  // Resistance 1
s1 = 2 * pp - pivot_high_prev_day  // Support 1
r2 = pp + (pivot_high_prev_day - pivot_low_prev_day) // Resistance 2
s2 = pp - (pivot_high_prev_day - pivot_low_prev_day) // Support 2
r3 = pivot_high_prev_day + 2 * (pp - pivot_low_prev_day) // Resistance 3
s3 = pivot_low_prev_day - 2 * (pivot_high_prev_day - pp)  // Support 3


// ————— TREND DEFINITION & REGIME —————
// This section combines various calculated components to determine the overall market trend and regime.

// Is the market currently trending according to ADX?
is_trending_market = adx_val > adx_trend_threshold

// Is the price above (uptrend) or below (downtrend) the VWMA?
is_vwma_uptrend_indic = close > vwma_val
is_vwma_downtrend_indic = close < vwma_val

// Is the PVT showing bullish (rising) or bearish (falling) momentum?
// Adding a second condition (pvt_val[1] > pvt_val[2]) for stronger confirmation of PVT direction.
is_pvt_bullish_indic = pvt_val > pvt_val[1] and pvt_val[1] > pvt_val[2]
is_pvt_bearish_indic = pvt_val < pvt_val[1] and pvt_val[1] < pvt_val[2]

// Is the smoothed price line rising or falling?
is_smoothed_price_rising_indic = smoothed_price > smoothed_price[1]
is_smoothed_price_falling_indic = smoothed_price < smoothed_price[1]

// Determine the overall market trend status based on ADX, VWMA, and optional MTF confirmation.
string market_trend_status = "Ranging / Weak Trend" // Default status
if is_trending_market // Only define strong uptrend/downtrend if ADX confirms a trend
    if is_vwma_uptrend_indic and (not mtf_enable or mtf_is_uptrend) // VWMA up and (MTF disabled or MTF up)
        market_trend_status := "Uptrend"
    else if is_vwma_downtrend_indic and (not mtf_enable or mtf_is_downtrend) // VWMA down and (MTF disabled or MTF down)
        market_trend_status := "Downtrend"
// If ADX is below threshold, it remains "Ranging / Weak Trend"


// ————— SIGNAL CONDITIONS (FOR PLOTTING) —————
// This section defines the conditions under which BUY or SELL signal arrows are plotted.
// These are not trade execution signals but visual cues based on indicator confluence.

// Long Signal Conditions:
long_cond_trend = market_trend_status == "Uptrend" // Overall market must be in an uptrend
long_cond_momentum = is_smoothed_price_rising_indic and is_pvt_bullish_indic // Smoothed price and PVT must show bullish momentum
long_cond_rsi = rsi_val < rsi_ob_level and rsi_val > rsi_os_level // RSI not overbought, but also not extremely oversold (can be adjusted for different strategies)
long_cond_price_action = close > vwma_lower_band // Price should be above the lower VWMA band, suggesting support
// long_cond_pivot = close > s1 // Optional condition: Price above S1 pivot support

// Combine all long conditions for a final buy signal
buy_signal_condition = long_cond_trend and long_cond_momentum and long_cond_rsi and long_cond_price_action

// Short Signal Conditions:
short_cond_trend = market_trend_status == "Downtrend" // Overall market must be in a downtrend
short_cond_momentum = is_smoothed_price_falling_indic and is_pvt_bearish_indic // Smoothed price and PVT must show bearish momentum
short_cond_rsi = rsi_val > rsi_os_level and rsi_val < rsi_ob_level // RSI not oversold, but also not extremely overbought
short_cond_price_action = close < vwma_upper_band // Price should be below the upper VWMA band, suggesting resistance
// short_cond_pivot = close < r1 // Optional condition: Price below R1 pivot resistance

// Combine all short conditions for a final sell signal
sell_signal_condition = short_cond_trend and short_cond_momentum and short_cond_rsi and short_cond_price_action

// Persist signal state and SL/TP levels for plotting across bars after a signal.
// `var` ensures these variables retain their values between bar calculations.
var bool last_buy_signal = false   // True if the last plotted signal was a buy
var bool last_sell_signal = false  // True if the last plotted signal was a sell
var float signal_price = na       // Price at which the last signal occurred
var float potential_sl = na       // Calculated potential Stop Loss for the last signal
var float potential_tp1 = na      // Calculated potential Take Profit 1 for the last signal
var float potential_tp2 = na      // Calculated potential Take Profit 2 for the last signal

// Conditions for resetting the plotted SL/TP lines (simplified for an indicator).
// This logic attempts to clear the SL/TP lines if price would have hit them.
bool reset_sl_tp_for_buy = last_buy_signal and (low < potential_sl or (not na(potential_tp1) and high > potential_tp1))
bool reset_sl_tp_for_sell = last_sell_signal and (high > potential_sl or (not na(potential_tp1) and low < potential_tp1))
bool should_reset_plots = reset_sl_tp_for_buy or reset_sl_tp_for_sell

// Logic to update signal state and calculate potential SL/TP when a new signal occurs.
if buy_signal_condition and not last_buy_signal[1] // A new buy signal (current condition true, previous bar's signal was false)
    last_buy_signal := true     // Set current signal as buy
    last_sell_signal := false   // Ensure no sell signal is active
    signal_price := close       // Record the price of the signal
    potential_sl := signal_price - atr_val * sl_atr_mult_ref // Calculate SL below entry
    potential_tp1 := signal_price + (signal_price - potential_sl) * tp1_rr_ref // Calculate TP1 based on R:R
    if tp2_rr_ref > 0 // If TP2 is enabled
        potential_tp2 := signal_price + (signal_price - potential_sl) * tp2_rr_ref // Calculate TP2
    else
        potential_tp2 := na // Otherwise, no TP2
else if sell_signal_condition and not last_sell_signal[1] // A new sell signal
    last_sell_signal := true    // Set current signal as sell
    last_buy_signal := false    // Ensure no buy signal is active
    signal_price := close       // Record the price of the signal
    potential_sl := signal_price + atr_val * sl_atr_mult_ref // Calculate SL above entry
    potential_tp1 := signal_price - (potential_sl - signal_price) * tp1_rr_ref // Calculate TP1 based on R:R
    if tp2_rr_ref > 0 // If TP2 is enabled
        potential_tp2 := signal_price - (potential_sl - signal_price) * tp2_rr_ref // Calculate TP2
    else
        potential_tp2 := na // Otherwise, no TP2
else if should_reset_plots // If conditions to reset SL/TP plots are met
    // Reset all signal state variables to clear plots from the chart
    last_buy_signal := false
    last_sell_signal := false
    signal_price := na
    potential_sl := na
    potential_tp1 := na
    potential_tp2 := na


// ————— PLOTTING —————
// This section handles all the visual output of the indicator on the chart.

// Smoothed Price Line: Plots the calculated smoothed price. Visibility and width are user-configurable.
plot(show_smoothed_price ? smoothed_price : na, "Smoothed Price", color=color.new(color.blue, 0), linewidth=smoothed_price_width)

// VWMA & Bands: Plots the VWMA line and its ATR-based bands.
plot(show_vwma_line ? vwma_val : na, "VWMA", color=color.new(color.orange, 0), linewidth=vwma_line_width)
vwma_upper_plot = plot(show_vwma_bands_plots ? vwma_upper_band : na, "VWMA Upper Band", color=color.new(color.gray, 70), linewidth=1)
vwma_lower_plot = plot(show_vwma_bands_plots ? vwma_lower_band : na, "VWMA Lower Band", color=color.new(color.gray, 70), linewidth=1)
// Fill the area between VWMA bands. Color changes based on VWMA trend, transparency is user-configurable.
// `display` argument ensures the fill is also hidden if `show_vwma_bands_plots` is false.
fill(vwma_upper_plot, vwma_lower_plot, 
     color=is_vwma_uptrend_indic ? color.new(color.green, vwma_fill_transp_input) : color.new(color.red, vwma_fill_transp_input), 
     title="VWMA Trend Fill", 
     display=show_vwma_bands_plots ? display.all : display.none)


// Pivot Points: Plots daily pivot levels if enabled and if the chart timeframe is daily.
plot(show_pivots and timeframe.isdaily ? pp : na, "PP", color=color.new(color.yellow, 0), style=plot.style_linebr, linewidth=1)
plot(show_pivots and timeframe.isdaily ? s1 : na, "S1", color=color.new(color.green, 0), style=plot.style_linebr, linewidth=1)
plot(show_pivots and timeframe.isdaily ? r1 : na, "R1", color=color.new(color.red, 0), style=plot.style_linebr, linewidth=1)
plot(show_pivots and timeframe.isdaily ? s2 : na, "S2", color=color.new(color.green, 50), style=plot.style_linebr, linewidth=1)
plot(show_pivots and timeframe.isdaily ? r2 : na, "R2", color=color.new(color.red, 50), style=plot.style_linebr, linewidth=1)
// Optional S3/R3 plots are commented out by default but can be enabled.
// plot(show_pivots and timeframe.isdaily ? s3 : na, "S3", color=color.new(color.green, 70), style=plot.style_linebr, linewidth=1)
// plot(show_pivots and timeframe.isdaily ? r3 : na, "R3", color=color.new(color.red, 70), style=plot.style_linebr, linewidth=1)


// RSI Overbought/Oversold lines: These are commented out as they are typically shown in a separate pane.
// If this indicator is moved to its own pane, these lines can be useful.
// hline(rsi_ob_level, "RSI OB", color=color.new(color.red, 50), linestyle=hline.style_dashed)
// hline(rsi_os_level, "RSI OS", color=color.new(color.green, 50), linestyle=hline.style_dashed)

// Buy/Sell Signal Arrows: Plots arrows on the chart when buy or sell signal conditions are met.
// `not last_buy_signal[1]` ensures the arrow only plots on the first bar the condition is true.
plotshape(show_buy_sell_arrows and buy_signal_condition and not last_buy_signal[1], title="Buy Signal", location=location.belowbar, color=color.new(color.green, 0), style=shape.arrowup, size=size.normal, text="BUY")
plotshape(show_buy_sell_arrows and sell_signal_condition and not last_sell_signal[1], title="Sell Signal", location=location.abovebar, color=color.new(color.red, 0), style=shape.arrowdown, size=size.normal, text="SELL")

// Plot Potential SL/TP levels: Shows reference SL and TP levels on the chart if a signal is active and plotting is enabled.
plot(show_potential_sl_tp and (last_buy_signal or last_sell_signal) ? potential_sl : na, "Potential SL", color=color.new(color.red, 20), style=plot.style_cross, linewidth=2)
plot(show_potential_sl_tp and (last_buy_signal or last_sell_signal) ? potential_tp1 : na, "Potential TP1", color=color.new(color.green, 20), style=plot.style_cross, linewidth=2)
plot(show_potential_sl_tp and (last_buy_signal or last_sell_signal) and not na(potential_tp2) ? potential_tp2 : na, "Potential TP2", color=color.new(color.lime, 20), style=plot.style_cross, linewidth=2)

// ————— ON-SCREEN TREND TABLE (Simple Version) —————
// Creates and updates a table in the top-right corner of the chart to display key indicator statuses.
// `var table` ensures the table is created only once.
var table trend_table = table.new(position.top_right, 2, 5, border_width=1)
// `if barstate.islast` optimizes performance by updating the table content only on the last (real-time) bar.
if barstate.islast 
    // Table Header
    table.cell(trend_table, 0, 0, "Market Monitor", bgcolor=color.new(color.blue, 70), text_color=color.white, width=10, text_size = table_text_size_input)
    table.cell(trend_table, 1, 0, "Status", bgcolor=color.new(color.blue, 70), text_color=color.white, width=15, text_size = table_text_size_input)

    // Row 1: Overall Trend Status
    table.cell(trend_table, 0, 1, "Overall Trend:", bgcolor=color.gray, text_color=color.white, text_size = table_text_size_input)
    table.cell(trend_table, 1, 1, market_trend_status,
         bgcolor = market_trend_status == "Uptrend" ? color.new(color.green,70) : market_trend_status == "Downtrend" ? color.new(color.red,70) : color.new(color.orange,70),
         text_color=color.white, text_size = table_text_size_input)

    // Row 2: ADX Strength
    table.cell(trend_table, 0, 2, "ADX Strength:", bgcolor=color.gray, text_color=color.white, text_size = table_text_size_input)
    table.cell(trend_table, 1, 2, 
         str.tostring(adx_val, "#.##") + (is_trending_market ? " (Trending)" : " (Ranging/Weak)"), // Display ADX value and trend state
         bgcolor=is_trending_market ? color.new(color.teal,80) : color.new(color.silver,80), 
         text_color=color.white, text_size = table_text_size_input)

    // Row 3: MTF Status
    mtf_status_text = mtf_enable ? (mtf_is_uptrend ? "MTF Up" : mtf_is_downtrend ? "MTF Down" : "MTF Neutral") : "MTF Disabled"
    mtf_status_color = mtf_enable ? (mtf_is_uptrend ? color.new(color.green,80) : mtf_is_downtrend ? color.new(color.red,80) : color.new(color.orange,80)) : color.new(color.gray,80)
    table.cell(trend_table, 0, 3, "MTF Status:", bgcolor=color.gray, text_color=color.white, text_size = table_text_size_input)
    table.cell(trend_table, 1, 3, mtf_status_text, bgcolor=mtf_status_color, text_color=color.white, text_size = table_text_size_input)

    // Row 4: RSI Status
    rsi_status_text = rsi_val > rsi_ob_level ? "Overbought (" + str.tostring(rsi_val, "#.##") + ")" : rsi_val < rsi_os_level ? "Oversold (" + str.tostring(rsi_val, "#.##") + ")" : "Neutral (" + str.tostring(rsi_val, "#.##") + ")"
    rsi_status_color = rsi_val > rsi_ob_level ? color.new(color.purple, 70) : rsi_val < rsi_os_level ? color.new(color.aqua, 70) : color.new(color.gray, 70)
    table.cell(trend_table, 0, 4, "RSI Status:", bgcolor=color.gray, text_color=color.white, text_size = table_text_size_input)
    table.cell(trend_table, 1, 4, rsi_status_text, bgcolor=rsi_status_color, text_color=color.white, text_size = table_text_size_input)

// ————— ALERTS —————
// Defines conditions that can be used to create alerts in TradingView.
// These alerts can notify the user when specific indicator events occur.
alertcondition(buy_signal_condition and not last_buy_signal[1] and show_buy_sell_arrows, title="EPA Buy Signal", message="Enhanced ProfitAlgo Indicator: Potential BUY for {{ticker}} at {{close}}")
alertcondition(sell_signal_condition and not last_sell_signal[1] and show_buy_sell_arrows, title="EPA Sell Signal", message="Enhanced ProfitAlgo Indicator: Potential SELL for {{ticker}} at {{close}}")
alertcondition(market_trend_status != market_trend_status[1], title="EPA Trend Change", message="Enhanced ProfitAlgo Indicator: Market trend changed to {{market_trend_status}} for {{ticker}}")

